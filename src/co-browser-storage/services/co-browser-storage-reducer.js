exports.ADDED_CO_STORE_ITEM = 'ADDED_CO_STORE_ITEM';
exports.UPDATE_CO_STORE_ITEM = 'UPDATE_CO_STORE_ITEM';
exports.REMOVED_CO_STORE_ITEM = 'REMOVED_CO_STORE_ITEM';
exports.INIT_CO_STORE_ITEMS = 'INIT_CO_STORE_ITEMS';
// Send in initial state here, defaults to an empty array of kvp:s
// Actions come with a type and payload (destructuring second arg to 'type' and 'payload')
exports.coBrowserStorageReducer = function (state, _a) {
    if (state === void 0) { state = []; }
    var type = _a.type, payload = _a.payload;
    switch (type) {
        case exports.INIT_CO_STORE_ITEMS:
            // Set all at once
            return payload;
        case exports.ADDED_CO_STORE_ITEM:
            // create a new array with the previous and new kvp:s
            return state.concat([Object.assign({}, payload)]);
        case exports.UPDATE_CO_STORE_ITEM:
            // if it's not the interesting kvp, just return it,
            // otherwise create a new kvp for it
            return state.map(function (kvp) {
                return kvp.key !== payload.key ?
                    kvp :
                    Object.assign({}, kvp, payload); // create copy of it
            });
        case exports.REMOVED_CO_STORE_ITEM:
            // filter out the kvp to remove
            return state.filter(function (kvp) {
                return kvp.key !== payload.key;
            });
        default:
            return state;
    }
};

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImNvLWJyb3dzZXItc3RvcmFnZS9zZXJ2aWNlcy9jby1icm93c2VyLXN0b3JhZ2UtcmVkdWNlci50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFFYSwyQkFBbUIsR0FBRyxxQkFBcUIsQ0FBQTtBQUMzQyw0QkFBb0IsR0FBRyxzQkFBc0IsQ0FBQTtBQUM3Qyw2QkFBcUIsR0FBRyx1QkFBdUIsQ0FBQTtBQUMvQywyQkFBbUIsR0FBRyxxQkFBcUIsQ0FBQTtBQUV4RCxrRUFBa0U7QUFDbEUsMEZBQTBGO0FBQzdFLCtCQUF1QixHQUFHLFVBQUMsS0FBVSxFQUFFLEVBQWU7SUFBM0IscUJBQVUsR0FBVixVQUFVO1FBQUcsSUFBSSxZQUFFLE9BQU87SUFDaEUsTUFBTSxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQztRQUViLEtBQUssMkJBQW1CO1lBQ3RCLGtCQUFrQjtZQUNsQixNQUFNLENBQUMsT0FBTyxDQUFBO1FBRWhCLEtBQUssMkJBQW1CO1lBQ3RCLHFEQUFxRDtZQUNyRCxNQUFNLENBQUMsS0FBSyxDQUFDLE1BQU0sQ0FBQyxDQUFDLE1BQU0sQ0FBQyxNQUFNLENBQUMsRUFBRSxFQUFFLE9BQU8sQ0FBQyxDQUFDLENBQUMsQ0FBQTtRQUVuRCxLQUFLLDRCQUFvQjtZQUN2QixtREFBbUQ7WUFDbkQsb0NBQW9DO1lBQ3BDLE1BQU0sQ0FBQyxLQUFLLENBQUMsR0FBRyxDQUFDLFVBQUEsR0FBRztnQkFDbEIsTUFBTSxDQUFDLEdBQUcsQ0FBQyxHQUFHLEtBQUssT0FBTyxDQUFDLEdBQUc7b0JBQzVCLEdBQUc7b0JBQ0gsTUFBTSxDQUFDLE1BQU0sQ0FBQyxFQUFFLEVBQUUsR0FBRyxFQUFFLE9BQU8sQ0FBQyxDQUFBLENBQUMsb0JBQW9CO1lBQ3hELENBQUMsQ0FBQyxDQUFBO1FBRUosS0FBSyw2QkFBcUI7WUFDeEIsK0JBQStCO1lBQy9CLE1BQU0sQ0FBQyxLQUFLLENBQUMsTUFBTSxDQUFDLFVBQUMsR0FBRztnQkFDdEIsTUFBTSxDQUFDLEdBQUcsQ0FBQyxHQUFHLEtBQUssT0FBTyxDQUFDLEdBQUcsQ0FBQTtZQUNoQyxDQUFDLENBQUMsQ0FBQTtRQUVKO1lBQ0UsTUFBTSxDQUFDLEtBQUssQ0FBQTtJQUNoQixDQUFDO0FBQ0gsQ0FBQyxDQUFBIiwiZmlsZSI6ImNvLWJyb3dzZXItc3RvcmFnZS9zZXJ2aWNlcy9jby1icm93c2VyLXN0b3JhZ2UtcmVkdWNlci5qcyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7UmVkdWNlciwgQWN0aW9ufSBmcm9tICdAbmdyeC9zdG9yZSdcblxuZXhwb3J0IGNvbnN0IEFEREVEX0NPX1NUT1JFX0lURU0gPSAnQURERURfQ09fU1RPUkVfSVRFTSdcbmV4cG9ydCBjb25zdCBVUERBVEVfQ09fU1RPUkVfSVRFTSA9ICdVUERBVEVfQ09fU1RPUkVfSVRFTSdcbmV4cG9ydCBjb25zdCBSRU1PVkVEX0NPX1NUT1JFX0lURU0gPSAnUkVNT1ZFRF9DT19TVE9SRV9JVEVNJ1xuZXhwb3J0IGNvbnN0IElOSVRfQ09fU1RPUkVfSVRFTVMgPSAnSU5JVF9DT19TVE9SRV9JVEVNUydcblxuLy8gU2VuZCBpbiBpbml0aWFsIHN0YXRlIGhlcmUsIGRlZmF1bHRzIHRvIGFuIGVtcHR5IGFycmF5IG9mIGt2cDpzXG4vLyBBY3Rpb25zIGNvbWUgd2l0aCBhIHR5cGUgYW5kIHBheWxvYWQgKGRlc3RydWN0dXJpbmcgc2Vjb25kIGFyZyB0byAndHlwZScgYW5kICdwYXlsb2FkJylcbmV4cG9ydCBjb25zdCBjb0Jyb3dzZXJTdG9yYWdlUmVkdWNlciA9IChzdGF0ZSA9IFtdLCB7dHlwZSwgcGF5bG9hZH0pID0+IHtcbiAgc3dpdGNoICh0eXBlKSB7XG5cbiAgICBjYXNlIElOSVRfQ09fU1RPUkVfSVRFTVM6XG4gICAgICAvLyBTZXQgYWxsIGF0IG9uY2VcbiAgICAgIHJldHVybiBwYXlsb2FkXG5cbiAgICBjYXNlIEFEREVEX0NPX1NUT1JFX0lURU06XG4gICAgICAvLyBjcmVhdGUgYSBuZXcgYXJyYXkgd2l0aCB0aGUgcHJldmlvdXMgYW5kIG5ldyBrdnA6c1xuICAgICAgcmV0dXJuIHN0YXRlLmNvbmNhdChbT2JqZWN0LmFzc2lnbih7fSwgcGF5bG9hZCldKVxuXG4gICAgY2FzZSBVUERBVEVfQ09fU1RPUkVfSVRFTTpcbiAgICAgIC8vIGlmIGl0J3Mgbm90IHRoZSBpbnRlcmVzdGluZyBrdnAsIGp1c3QgcmV0dXJuIGl0LFxuICAgICAgLy8gb3RoZXJ3aXNlIGNyZWF0ZSBhIG5ldyBrdnAgZm9yIGl0XG4gICAgICByZXR1cm4gc3RhdGUubWFwKGt2cCA9PiB7XG4gICAgICAgIHJldHVybiBrdnAua2V5ICE9PSBwYXlsb2FkLmtleSA/XG4gICAgICAgICAga3ZwIDpcbiAgICAgICAgICBPYmplY3QuYXNzaWduKHt9LCBrdnAsIHBheWxvYWQpIC8vIGNyZWF0ZSBjb3B5IG9mIGl0XG4gICAgICB9KVxuXG4gICAgY2FzZSBSRU1PVkVEX0NPX1NUT1JFX0lURU06XG4gICAgICAvLyBmaWx0ZXIgb3V0IHRoZSBrdnAgdG8gcmVtb3ZlXG4gICAgICByZXR1cm4gc3RhdGUuZmlsdGVyKChrdnApID0+IHtcbiAgICAgICAgcmV0dXJuIGt2cC5rZXkgIT09IHBheWxvYWQua2V5XG4gICAgICB9KVxuXG4gICAgZGVmYXVsdDpcbiAgICAgIHJldHVybiBzdGF0ZVxuICB9XG59XG4iXSwic291cmNlUm9vdCI6Ii9ub2RlX21vZHVsZXMifQ==
