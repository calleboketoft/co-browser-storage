exports.ADD_KVP = 'ADD_KVP';
exports.UPDATE_KVP = 'UPDATE_KVP';
exports.REMOVE_KVP = 'REMOVE_KVP';
exports.INIT_KVPS = 'INIT_KVPS';
// Send in initial state here, defaults to an empty array of kvp:s
// Actions come with a type and payload (destructuring second arg to 'type' and 'payload')
exports.coBrowserStorageReducer = function (state, _a) {
    if (state === void 0) { state = []; }
    var type = _a.type, payload = _a.payload;
    switch (type) {
        case exports.INIT_KVPS:
            // Set all at once
            return payload;
        case exports.ADD_KVP:
            // create a new array with the previous and new kvp:s
            return state.concat([Object.assign({}, payload)]);
        case exports.UPDATE_KVP:
            // if it's not the interesting kvp, just return it,
            // otherwise create a new kvp for it
            return state.map(function (kvp) {
                return kvp.key !== payload.key ?
                    kvp :
                    Object.assign({}, kvp, payload); // create copy of it
            });
        case exports.REMOVE_KVP:
            // filter out the kvp to remove
            return state.filter(function (kvp) {
                return kvp.key !== payload.key;
            });
        default:
            return state;
    }
};

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImNvLWJyb3dzZXItc3RvcmFnZS9zZXJ2aWNlcy9jby1icm93c2VyLXN0b3JhZ2UtcmVkdWNlci50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFFYSxlQUFPLEdBQUcsU0FBUyxDQUFBO0FBQ25CLGtCQUFVLEdBQUcsWUFBWSxDQUFBO0FBQ3pCLGtCQUFVLEdBQUcsWUFBWSxDQUFBO0FBQ3pCLGlCQUFTLEdBQUcsV0FBVyxDQUFBO0FBRXBDLGtFQUFrRTtBQUNsRSwwRkFBMEY7QUFDN0UsK0JBQXVCLEdBQUcsVUFBQyxLQUFVLEVBQUUsRUFBZTtJQUEzQixxQkFBVSxHQUFWLFVBQVU7UUFBRyxJQUFJLFlBQUUsT0FBTztJQUNoRSxNQUFNLENBQUMsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDO1FBRWIsS0FBSyxpQkFBUztZQUNaLGtCQUFrQjtZQUNsQixNQUFNLENBQUMsT0FBTyxDQUFBO1FBRWhCLEtBQUssZUFBTztZQUNWLHFEQUFxRDtZQUNyRCxNQUFNLENBQUMsS0FBSyxDQUFDLE1BQU0sQ0FBQyxDQUFDLE1BQU0sQ0FBQyxNQUFNLENBQUMsRUFBRSxFQUFFLE9BQU8sQ0FBQyxDQUFDLENBQUMsQ0FBQTtRQUVuRCxLQUFLLGtCQUFVO1lBQ2IsbURBQW1EO1lBQ25ELG9DQUFvQztZQUNwQyxNQUFNLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQyxVQUFBLEdBQUc7Z0JBQ2xCLE1BQU0sQ0FBQyxHQUFHLENBQUMsR0FBRyxLQUFLLE9BQU8sQ0FBQyxHQUFHO29CQUM1QixHQUFHO29CQUNILE1BQU0sQ0FBQyxNQUFNLENBQUMsRUFBRSxFQUFFLEdBQUcsRUFBRSxPQUFPLENBQUMsQ0FBQSxDQUFDLG9CQUFvQjtZQUN4RCxDQUFDLENBQUMsQ0FBQTtRQUVKLEtBQUssa0JBQVU7WUFDYiwrQkFBK0I7WUFDL0IsTUFBTSxDQUFDLEtBQUssQ0FBQyxNQUFNLENBQUMsVUFBQyxHQUFHO2dCQUN0QixNQUFNLENBQUMsR0FBRyxDQUFDLEdBQUcsS0FBSyxPQUFPLENBQUMsR0FBRyxDQUFBO1lBQ2hDLENBQUMsQ0FBQyxDQUFBO1FBRUo7WUFDRSxNQUFNLENBQUMsS0FBSyxDQUFBO0lBQ2hCLENBQUM7QUFDSCxDQUFDLENBQUEiLCJmaWxlIjoiY28tYnJvd3Nlci1zdG9yYWdlL3NlcnZpY2VzL2NvLWJyb3dzZXItc3RvcmFnZS1yZWR1Y2VyLmpzIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtSZWR1Y2VyLCBBY3Rpb259IGZyb20gJ0BuZ3J4L3N0b3JlJ1xuXG5leHBvcnQgY29uc3QgQUREX0tWUCA9ICdBRERfS1ZQJ1xuZXhwb3J0IGNvbnN0IFVQREFURV9LVlAgPSAnVVBEQVRFX0tWUCdcbmV4cG9ydCBjb25zdCBSRU1PVkVfS1ZQID0gJ1JFTU9WRV9LVlAnXG5leHBvcnQgY29uc3QgSU5JVF9LVlBTID0gJ0lOSVRfS1ZQUydcblxuLy8gU2VuZCBpbiBpbml0aWFsIHN0YXRlIGhlcmUsIGRlZmF1bHRzIHRvIGFuIGVtcHR5IGFycmF5IG9mIGt2cDpzXG4vLyBBY3Rpb25zIGNvbWUgd2l0aCBhIHR5cGUgYW5kIHBheWxvYWQgKGRlc3RydWN0dXJpbmcgc2Vjb25kIGFyZyB0byAndHlwZScgYW5kICdwYXlsb2FkJylcbmV4cG9ydCBjb25zdCBjb0Jyb3dzZXJTdG9yYWdlUmVkdWNlciA9IChzdGF0ZSA9IFtdLCB7dHlwZSwgcGF5bG9hZH0pID0+IHtcbiAgc3dpdGNoICh0eXBlKSB7XG5cbiAgICBjYXNlIElOSVRfS1ZQUzpcbiAgICAgIC8vIFNldCBhbGwgYXQgb25jZVxuICAgICAgcmV0dXJuIHBheWxvYWRcblxuICAgIGNhc2UgQUREX0tWUDpcbiAgICAgIC8vIGNyZWF0ZSBhIG5ldyBhcnJheSB3aXRoIHRoZSBwcmV2aW91cyBhbmQgbmV3IGt2cDpzXG4gICAgICByZXR1cm4gc3RhdGUuY29uY2F0KFtPYmplY3QuYXNzaWduKHt9LCBwYXlsb2FkKV0pXG5cbiAgICBjYXNlIFVQREFURV9LVlA6XG4gICAgICAvLyBpZiBpdCdzIG5vdCB0aGUgaW50ZXJlc3Rpbmcga3ZwLCBqdXN0IHJldHVybiBpdCxcbiAgICAgIC8vIG90aGVyd2lzZSBjcmVhdGUgYSBuZXcga3ZwIGZvciBpdFxuICAgICAgcmV0dXJuIHN0YXRlLm1hcChrdnAgPT4ge1xuICAgICAgICByZXR1cm4ga3ZwLmtleSAhPT0gcGF5bG9hZC5rZXkgP1xuICAgICAgICAgIGt2cCA6XG4gICAgICAgICAgT2JqZWN0LmFzc2lnbih7fSwga3ZwLCBwYXlsb2FkKSAvLyBjcmVhdGUgY29weSBvZiBpdFxuICAgICAgfSlcblxuICAgIGNhc2UgUkVNT1ZFX0tWUDpcbiAgICAgIC8vIGZpbHRlciBvdXQgdGhlIGt2cCB0byByZW1vdmVcbiAgICAgIHJldHVybiBzdGF0ZS5maWx0ZXIoKGt2cCkgPT4ge1xuICAgICAgICByZXR1cm4ga3ZwLmtleSAhPT0gcGF5bG9hZC5rZXlcbiAgICAgIH0pXG5cbiAgICBkZWZhdWx0OlxuICAgICAgcmV0dXJuIHN0YXRlXG4gIH1cbn1cbiJdLCJzb3VyY2VSb290IjoiL25vZGVfbW9kdWxlcyJ9
