{"version":3,"sources":["co-browser-storage/services/co-browser-storage-reducer.ts"],"names":[],"mappings":"AAEa,eAAO,GAAG,SAAS,CAAA;AACnB,kBAAU,GAAG,YAAY,CAAA;AACzB,kBAAU,GAAG,YAAY,CAAA;AACzB,iBAAS,GAAG,WAAW,CAAA;AAEpC,kEAAkE;AAClE,0FAA0F;AAC7E,+BAAuB,GAAG,UAAC,KAAU,EAAE,EAAe;IAA3B,qBAAU,GAAV,UAAU;QAAG,IAAI,YAAE,OAAO;IAChE,MAAM,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC;QAEb,KAAK,iBAAS;YACZ,kBAAkB;YAClB,MAAM,CAAC,OAAO,CAAA;QAEhB,KAAK,eAAO;YACV,qDAAqD;YACrD,MAAM,CAAC,KAAK,CAAC,MAAM,CAAC,CAAC,MAAM,CAAC,MAAM,CAAC,EAAE,EAAE,OAAO,CAAC,CAAC,CAAC,CAAA;QAEnD,KAAK,kBAAU;YACb,mDAAmD;YACnD,oCAAoC;YACpC,MAAM,CAAC,KAAK,CAAC,GAAG,CAAC,UAAA,GAAG;gBAClB,MAAM,CAAC,GAAG,CAAC,GAAG,KAAK,OAAO,CAAC,GAAG;oBAC5B,GAAG;oBACH,MAAM,CAAC,MAAM,CAAC,EAAE,EAAE,GAAG,EAAE,OAAO,CAAC,CAAA,CAAC,oBAAoB;YACxD,CAAC,CAAC,CAAA;QAEJ,KAAK,kBAAU;YACb,+BAA+B;YAC/B,MAAM,CAAC,KAAK,CAAC,MAAM,CAAC,UAAC,GAAG;gBACtB,MAAM,CAAC,GAAG,CAAC,GAAG,KAAK,OAAO,CAAC,GAAG,CAAA;YAChC,CAAC,CAAC,CAAA;QAEJ;YACE,MAAM,CAAC,KAAK,CAAA;IAChB,CAAC;AACH,CAAC,CAAA","file":"co-browser-storage/services/co-browser-storage-reducer.js","sourcesContent":["import {Reducer, Action} from '@ngrx/store'\n\nexport const ADD_KVP = 'ADD_KVP'\nexport const UPDATE_KVP = 'UPDATE_KVP'\nexport const REMOVE_KVP = 'REMOVE_KVP'\nexport const INIT_KVPS = 'INIT_KVPS'\n\n// Send in initial state here, defaults to an empty array of kvp:s\n// Actions come with a type and payload (destructuring second arg to 'type' and 'payload')\nexport const coBrowserStorageReducer = (state = [], {type, payload}) => {\n  switch (type) {\n\n    case INIT_KVPS:\n      // Set all at once\n      return payload\n\n    case ADD_KVP:\n      // create a new array with the previous and new kvp:s\n      return state.concat([Object.assign({}, payload)])\n\n    case UPDATE_KVP:\n      // if it's not the interesting kvp, just return it,\n      // otherwise create a new kvp for it\n      return state.map(kvp => {\n        return kvp.key !== payload.key ?\n          kvp :\n          Object.assign({}, kvp, payload) // create copy of it\n      })\n\n    case REMOVE_KVP:\n      // filter out the kvp to remove\n      return state.filter((kvp) => {\n        return kvp.key !== payload.key\n      })\n\n    default:\n      return state\n  }\n}\n"],"sourceRoot":"/source/"}