{"version":3,"sources":["co-browser-storage/services/persistence-service.ts"],"names":["PersistenceService","PersistenceService.constructor","PersistenceService.setConfigToLS","PersistenceService.getConfigFromLS","PersistenceService.removeItem","PersistenceService.initialize","PersistenceService.getItemFromSchema","PersistenceService.initExisting","PersistenceService.initFromScratch","PersistenceService.saveState"],"mappings":"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","file":"co-browser-storage/services/persistence-service.js","sourcesContent":["import {Injectable} from 'angular2/core'\n\n@Injectable()\nexport class PersistenceService {\n  /**\n   * in localStorage, the config is saved like this\n   * DB_CONFIG = {\n   *   MEMORY_STATE: [], // current state from app\n   *   INITIAL_SCHEMA: [] // initial state from when initializing app\n   * }\n   */\n  private DB_CONFIG_KEY = 'CO_BROWSER_DB';\n  private DB_MEMORY_KEY = 'MEMORY_STATE';\n  private DB_INITIAL_KEY = 'INITIAL_SCHEMA';\n  private options;\n\n  setConfigToLS (configObj) {\n    let configStr = JSON.stringify(configObj)\n    window.localStorage[this.DB_CONFIG_KEY] = configStr\n  }\n\n  getConfigFromLS () {\n    let configStr = localStorage[this.DB_CONFIG_KEY]\n    if (typeof configStr === 'undefined') {\n      return null\n    } else {\n      return JSON.parse(configStr)\n    }\n  }\n\n  removeItem (kvp) {\n    window[kvp.storageType]['removeItem'](kvp.key)\n  }\n\n  // Initialize\n  // ----------\n  initialize (options) {\n    this.options = options\n    var dbConfig = this.getConfigFromLS()\n    let updatedConfig\n    if (!dbConfig) {\n      // there is no current state stored, initialize from scratch\n      updatedConfig = this.initFromScratch (options)\n    } else {\n      // a current state is existing, validate against schema\n      updatedConfig = this.initExisting (options.namespace, dbConfig)\n    }\n    return updatedConfig[this.DB_MEMORY_KEY]\n  }\n\n  // this function works on items that are in the schema\n  getItemFromSchema (itemKey) {\n    let schemaItem = this.options['initialState'].filter((item) => {\n      return itemKey === item.key\n    })[0]\n    if (schemaItem) {\n      return {\n        key: itemKey,\n        value: schemaItem.default,\n        storageType: schemaItem.storageType,\n        valueType: schemaItem.valueType,\n        inConfigFile: true\n      }\n    }\n    return\n  }\n\n  // Validate each existing item from storage against the memory\n  initExisting (namespace, dbConfig) {\n    let actualMemory = dbConfig[this.DB_MEMORY_KEY].map((memoryItem) => {\n      var storageItem = window[memoryItem.storageType][namespace + '.' + memoryItem.key]\n      if (typeof storageItem === 'undefined') {\n        // the item doesn't exist at all, set it\n        window[memoryItem.storageType][namespace + '.' + memoryItem.key] = memoryItem.value\n        return memoryItem\n      } else {\n        let actualValue = window[memoryItem.storageType][namespace + '.' + memoryItem.key]\n        if (actualValue === memoryItem.value) {\n          // the value has not been touched outside of this GUI\n          return memoryItem\n        } else {\n          // the value has been manually modified by a user\n          let updatedMemoryItem = {\n            key: memoryItem.key,\n            value: actualValue,\n            storageType: memoryItem.storageType,\n            valueType: memoryItem.valueType,\n            inConfigFile: !!memoryItem.inConfigFile\n          }\n          return updatedMemoryItem\n        }\n      }\n    })\n    dbConfig[this.DB_MEMORY_KEY] = actualMemory\n    this.setConfigToLS(dbConfig)\n    return dbConfig\n  }\n\n  // Initialize the storage from scratch\n  initFromScratch (options) {\n    let stateForMemory = options.initialState.map((schemaItem) => {\n      // transform the schema to the memory type\n      window[schemaItem.storageType][options.namespace + '.' + schemaItem.key] = schemaItem.default\n      return {\n        key: schemaItem.key,\n        value: schemaItem.default, // from scratch, the default is the value\n        storageType: schemaItem.storageType,\n        valueType: schemaItem.valueType,\n        inConfigFile: true // only the ones from the config file are here, used for 'reset' functionality\n      }\n    })\n    let dbConfig = {}\n    dbConfig[this.DB_INITIAL_KEY] = options.initialState\n    dbConfig[this.DB_MEMORY_KEY] = stateForMemory\n    this.setConfigToLS(dbConfig)\n    return dbConfig\n  }\n\n  // Save state\n  // ----------\n  saveState (stateArr) {\n    // Save all items like window.localStorage['coBrowserNamespace.myKey'] = 'my value'\n    let that = this // how come this is needed?\n    stateArr.forEach((stateItem) => {\n      window[stateItem.storageType][that.options.namespace + '.' + stateItem.key] = stateItem.value\n    })\n\n    let dbConfig = this.getConfigFromLS()\n    // Save the whole memory object\n    dbConfig[this.DB_MEMORY_KEY] = stateArr\n    this.setConfigToLS(dbConfig)\n  }\n}\n"],"sourceRoot":"/source/"}